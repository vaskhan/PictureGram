//
//  SplashViewController.swift
//  PictureGram
//
//  Created by –í–∞—Å–∏–ª–∏–π –•–∞–Ω–∏–Ω on 02.02.2025.
//

import UIKit
import Kingfisher

final class SplashViewController: UIViewController {
    private let storage = OAuth2TokenStorage()
    private let showAuthScreenSegueIdentifier = "ShowAuthScreen"
    private let profileService = ProfileService.shared
    
    private let logoImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "Vector")
        imageView.contentMode = .scaleAspectFit
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupConfigUI()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        print("üöÄ SplashViewController –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
        checkAuth()
    }
    
    private func setupConfigUI() {
        view.backgroundColor = .ypBlack
        view.addSubview(logoImageView)
        
        NSLayoutConstraint.activate([
            logoImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            logoImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
        ])
    }
    
    private func checkAuth() {
        print("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        print("üì¶ –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: \(storage.token ?? "nil")")
        if storage.token != nil {
            switchTabBarController()
        } else {
            DispatchQueue.main.async {
                let authViewController = AuthViewController()
                authViewController.modalPresentationStyle = .fullScreen
                self.present(authViewController, animated: true, completion: nil)
            }
        }
    }
    
    private func switchTabBarController() {
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ TabBarController...")
        
        ProfileService.shared.fetchProfile { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let profile):
                    print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: \(profile.name)")
                    
                    ProfileImageService.shared.fetchProfileImageURL(username: profile.username) { result in
                        if case .success(let imageURL) = result {
                            KingfisherManager.shared.retrieveImage(with: URL(string: imageURL)!) { _ in
                                print("‚úÖ [Splash]: –ê–≤–∞—Ç–∞—Ä –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω")
                            }
                        }
                        guard let window = UIApplication.shared.windows.first else {
                            assertionFailure("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                            return
                        }
                        
                        let tabBarController = UIStoryboard(name: "Main", bundle: .main)
                            .instantiateViewController(withIdentifier: "TabBarViewController")
                        
                        window.rootViewController = tabBarController
                    }
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: \(error.localizedDescription)")
                    
                }
            }
        }
    }
}

extension SplashViewController: AuthViewControllerDelegate {
    func didAuthenticate(_ vc: AuthViewController) {
        vc.dismiss(animated: true) { [weak self] in
            print("‚úÖ –≠–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
            guard let self = self else { return }
            
            self.fetchProfileData()
        }
    }
    
    private func fetchProfileData() {
        print("üì° –ó–∞–ø—É—Å–∫ fetchProfileData()")
        UIBlockingProgressHUD.show()
        
        profileService.fetchProfile { [weak self] result in
            UIBlockingProgressHUD.dismiss()
            
            switch result {
            case .success(let profile):
                guard ProfileService.shared.profile != nil else {
                    self?.showErrorAlert(message: "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    return
                }
                print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: \(profile.name)")
                
                ProfileImageService.shared.fetchProfileImageURL(username: profile.username) { _ in
                    print("‚úÖ –ó–∞–ø—Ä–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    DispatchQueue.main.async {
                        self?.switchTabBarController()
                    }
                }
                
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: \(error.localizedDescription)")
                self?.showErrorAlert(message: error.localizedDescription)
            }
        }
    }
    
    private func showErrorAlert(message: String) {
        let alert = UIAlertController(
            title: "–û—à–∏–±–∫–∞",
            message: message,
            preferredStyle: .alert
        )
        let retryAction = UIAlertAction(title: "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", style: .default) { [weak self] _ in
            self?.fetchProfileData()
        }
        alert.addAction(retryAction)
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        present(alert, animated: true)
    }
    
}
